"""levelapp/metrics/token.py"""
import datetime

from rapidfuzz import fuzz

from typing import Dict, Any, Callable

from levelapp.core.base import BaseMetric


class WeightedRatio(BaseMetric):
    """A metric that calculates a weighted ratio based on the other ratio algorithms"""

    def __init__(self, processor: Callable = None, score_cutoff: float | None = None):
        self.processor = processor
        self.score_cutoff = score_cutoff

    def _get_params(self) -> Dict[str, Any]:
        return {
            'processor': repr(self.processor) if self.processor else None,
            'score_cutoff': self.score_cutoff
        }

    def compute(self, generated: str, reference: str):
        """
        Compute the token-based metric between the generated text and the reference text.

        Args:
            generated (str): The text generated by the agent.
            reference (str): The expected reference text.

        Returns:
            Dict[str, Any]: A dictionary containing the score and metadata.
        """
        if not isinstance(generated, str) or not isinstance(reference, str):
            raise TypeError("Inputs must be strings")

        score = fuzz.ratio(
            s1=generated,
            s2=reference,
            processor=self.processor,
            score_cutoff=self.score_cutoff
        )

        return {
            "score": score / 100,
            "metadata": {
                "type": self.__class__.__name__,
                "params": self._get_params(),
                "inputs": {
                    "generated_length": len(generated),
                    "reference_length": len(reference)
                },
                "timestamp": datetime.datetime.now()
            }
        }


class TokenSetRatio(BaseMetric):
    """
    A metric that compares the words in the strings based
    on unique and common words between them using fuzz.ratio.
    """

    def __init__(self, processor: Callable = None, score_cutoff: float | None = None):
        self.processor = processor
        self.score_cutoff = score_cutoff

    def _get_params(self) -> Dict[str, Any]:
        return {
            'processor': repr(self.processor) if self.processor else None,
            'score_cutoff': self.score_cutoff
        }

    def compute(self, generated: str, reference: str):
        """
        Compute the token-based metric between the generated text and the reference text.

        Args:
            generated (str): The text generated by the agent.
            reference (str): The expected reference text.

        Returns:
            Dict[str, Any]: A dictionary containing the score and metadata.
        """
        if not isinstance(generated, str) or not isinstance(reference, str):
            raise TypeError("Inputs must be strings")

        score = fuzz.token_set_ratio(
            s1=generated,
            s2=reference,
            processor=self.processor,
            score_cutoff=self.score_cutoff
        )

        return {
            "score": score / 100,
            "metadata": {
                "type": self.__class__.__name__,
                "params": self._get_params(),
                "inputs": {
                    "generated_length": len(generated),
                    "reference_length": len(reference)
                },
                "timestamp": datetime.datetime.now()
            }
        }


class TokenSortRatio(BaseMetric):
    """A metric that sorts the words in the strings and calculates the fuzz.ratio between them."""

    def __init__(self, processor: Callable = None, score_cutoff: float | None = None):
        self.processor = processor
        self.score_cutoff = score_cutoff

    def _get_params(self) -> Dict[str, Any]:
        return {
            'processor': repr(self.processor) if self.processor else None,
            'score_cutoff': self.score_cutoff
        }

    def compute(self, generated: str, reference: str):
        """
        Compute the token-based metric between the generated text and the reference text.

        Args:
            generated (str): The text generated by the agent.
            reference (str): The expected reference text.

        Returns:
            Dict[str, Any]: A dictionary containing the score and metadata.
        """
        if not isinstance(generated, str) or not isinstance(reference, str):
            raise TypeError("Inputs must be strings")

        score = fuzz.token_sort_ratio(
            s1=generated,
            s2=reference,
            processor=self.processor,
            score_cutoff=self.score_cutoff
        )

        return {
            "score": score / 100,
            "metadata": {
                "type": self.__class__.__name__,
                "params": self._get_params(),
                "inputs": {
                    "generated_length": len(generated),
                    "reference_length": len(reference)
                },
                "timestamp": datetime.datetime.now()
            }
        }