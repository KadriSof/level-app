"""levelapp/metrics/fuzzy.py"""
from rapidfuzz import fuzz

from typing import Dict, Any

from levelapp.core.base import BaseMetric


class FuzzyRatio(BaseMetric):
    """
    A metric that computes the fuzzy ratio between two texts.
    This is useful for evaluating how similar two pieces of text are.
    """

    def __init__(self, processor=None, score_cutoff=None):
        self.processor = processor
        self.score_cutoff = score_cutoff

    def compute(self, generated_text: str, reference_text: str) -> Dict[str, Any]:
        """
        Compute the fuzzy ratio between the generated text and the reference text.

        Args:
            generated_text (str): The text generated by the agent.
            reference_text (str): The expected reference text.

        Returns:
            Dict[str, Any]: A dictionary containing the fuzzy ratio.
        """
        ratio = fuzz.ratio(
            s1=generated_text,
            s2=reference_text,
            processor=self.processor,
            score_cutoff=self.score_cutoff
        )
        # TODO-0: Return results as Pydantic model.
        return {
            "score": ratio / 100,
            "metadata": {
                "generated_text": generated_text,
                "reference_text": reference_text,
                "processor": self.processor,
                "score_cutoff": self.score_cutoff
            }
        }


class PartialRatio(BaseMetric):
    """
    A metric that computes the partial fuzzy ratio between two texts.
    This is useful for evaluating how similar two pieces of text are,
    allowing for partial matches.
    """

    def __init__(self, processor=None, score_cutoff=None):
        self.processor = processor
        self.score_cutoff = score_cutoff

    def compute(self, generated_text: str, reference_text: str) -> Dict[str, Any]:
        """
        Compute the partial fuzzy ratio between the generated text and the reference text.

        Args:
            generated_text (str): The text generated by the agent.
            reference_text (str): The expected reference text.

        Returns:
            Dict[str, Any]: A dictionary containing the partial fuzzy ratio.
        """
        ratio = fuzz.partial_ratio(
            s1=generated_text,
            s2=reference_text,
            processor=self.processor,
            score_cutoff=self.score_cutoff
        )
        return {
            "score": ratio / 100,
            "metadata": {
                "generated_text": generated_text,
                "reference_text": reference_text,
                "processor": self.processor,
                "score_cutoff": self.score_cutoff
            }
        }

# TODO-1: Implement other fuzzy metrics like token_sort_ratio, token_set_ratio, etc.