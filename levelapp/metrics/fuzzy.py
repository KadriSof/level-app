"""levelapp/metrics/fuzzy.py"""
import datetime

from rapidfuzz import fuzz

from typing import Dict, Any, Callable

from levelapp.core.base import BaseMetric
from levelapp.utils.monitoring import FunctionMonitor


class FuzzyRatio(BaseMetric):
    """A metric that computes the fuzzy ratio between two texts."""

    def __init__(self, processor: Callable = None, score_cutoff: float | None = None):
        self.processor = processor
        self.score_cutoff = score_cutoff

    def _get_params(self) -> Dict[str, Any]:
        return {
            'processor': repr(self.processor) if self.processor else None,
            'score_cutoff': self.score_cutoff
        }

    # @FunctionMonitor.monitor(name="fuzzy_ratio", cached=True, enable_timing=True)
    def compute(self, generated: str, reference: str) -> Dict[str, Any]:
        """
        Compute the fuzzy ratio between the generated text and the reference text.

        Args:
            generated (str): The text generated by the agent.
            reference (str): The expected reference text.

        Returns:
            Dict[str, Any]: A dictionary containing the fuzzy ratio score and metadata.
        """
        if not isinstance(generated, str) or not isinstance(reference, str):
            raise TypeError("Inputs must be strings")

        score = fuzz.ratio(
            s1=generated,
            s2=reference,
            processor=self.processor,
            score_cutoff=self.score_cutoff
        )

        # TODO-0: Return results as Pydantic model.
        return {
            "score": score / 100,
            "metadata": {
                "type": self.__class__.__name__,
                "params": self._get_params(),
                "inputs": {
                    "generated_length": len(generated),
                    "reference_length": len(reference)
                },
                "timestamp": datetime.datetime.now()
            }
        }


class PartialRatio(BaseMetric):
    """
    A metric that computes the partial fuzzy ratio between two texts.
    This is useful for evaluating how similar two pieces of text are,
    allowing for partial matches.
    """

    def __init__(self, processor: Callable = None, score_cutoff: float | None = None):
        self.processor = processor
        self.score_cutoff = score_cutoff

    def _get_params(self) -> Dict[str, Any]:
        return {
            'processor': repr(self.processor) if self.processor else None,
            'score_cutoff': self.score_cutoff
        }

    # @FunctionMonitor.monitor(name="partial_ratio", cached=True, enable_timing=True)
    def compute(self, generated: str, reference: str) -> Dict[str, Any]:
        """
        Compute the partial fuzzy ratio between the generated text and the reference text.

        Args:
            generated (str): The text generated by the agent.
            reference (str): The expected reference text.

        Returns:
            Dict[str, Any]: A dictionary containing the partial fuzzy ratio.
        """
        if not isinstance(generated, str) or not isinstance(reference, str):
            raise TypeError("Inputs must be strings")

        score = fuzz.partial_ratio(
            s1=generated,
            s2=reference,
            processor=self.processor,
            score_cutoff=self.score_cutoff
        )
        return {
            "score": score / 100,
            "metadata": {
                "type": self.__class__.__name__,
                "params": self._get_params(),
                "inputs": {
                    "generated_length": len(generated),
                    "reference_length": len(reference)
                },
                "timestamp": datetime.datetime.now()
            }
        }


FUZZY_METRICS = {
    "fuzzy_ratio": FuzzyRatio,
    "partial_ratio": PartialRatio,
}
